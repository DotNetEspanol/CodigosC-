{"Name":"Radial Progress","Id":1627,"Alias":"radialprogress","Description":"`RadialProgressView` is a stylish, circular progress view for iOS\nand Android. The circle begins empty, and fills clockwise to indicate\nprogress.\n\nTo use `RadialProgressView` from iOS:\n\n```csharp\nusing RadialProgress;\n...\npublic override void ViewDidLoad()\n{\n\tbase.ViewDidLoad();\n\n\tvar progressView = new RadialProgressView {\n\t\tCenter = new PointF (View.Center.X, View.Center.Y - 100)\n\t};\n\tView.AddSubview (progressView);\n}\n```\n\nFrom Android:\n\n```csharp\nusing RadialProgress;\n...\nprotected override void OnCreate (Bundle bundle)\n{\n\tbase.OnCreate (bundle);\n\n\tvar progressView = new RadialProgressView (this);\n\tAddContentView (progressView, new ViewGroup.LayoutParams (200, 200));\n}\n```\n\nSet the view\u0027s `Value` property to values between `0` and `1` to update\nprogress percentage:\n\n```csharp\nprogressView.Value = 0.5f;\n```\n","Version":"1.0.1.3","Summary":"A stylish, circular progress view.","QuickStart":"`RadialProgressView` is a stylish, circular progress view.  The circle\nbegins empty, and fills clockwise to indicate progress.\n\n## Examples\n\nTo add `RadialProgressView` to your iOS app:\n\n```csharp\nusing RadialProgress;\n...\n\npublic override void ViewDidLoad()\n{\n\tbase.ViewDidLoad();\n\n\tvar progressView = new RadialProgressView {\n\t\tCenter = new PointF (View.Center.X, View.Center.Y - 100)\n\t};\n\tView.AddSubview (progressView);\n}\n```\n\nTo add `RadialProgressView` to your Android app:\n\n```csharp\nusing RadialProgress;\n...\nprotected override void OnCreate (Bundle bundle)\n{\n\tbase.OnCreate (bundle);\n\n\tvar progressView = new RadialProgressView (this);\n\tAddContentView (progressView, new ViewGroup.LayoutParams (200, 200));\n}\n```\n\nSet the view\u0027s `Value` property to values between `0` and `1` to update\nprogress percentage:\n\n```csharp\nprogressView.Value = 0.5f;\n```\n\nYou can set minimum and maximum limits for `Value` instead of using the\ndefaults of `0` and `1`:\n\n```csharp\nprogressView.MinValue = 0;\nprogressView.MaxValue = 100;\n```\n\nProperty `IsDone` shows whether `Value` has reached `MaxValue`.  The\n`Reset()` method resets `Value` to `MinValue`:\n\n```csharp\nif (progressView.IsDone)\n\tprogressView.Reset ();\n```\n\nYou can choose among three different appearance styles for\n`RadialProgressView`: `Big` (default), `Small`, or `Tiny`.\n\n```csharp\nvar smallProgressView = new RadialProgressView (RadialProgressViewStyle.Small);\n```\n\nTo hide the progress percentage label:\n\n```csharp\nprogressView.LabelHidden = true;\n```\n\nTo change the progress color:\n\n```csharp\nprogressView.ProgressColor = UIColor.Red;\n```\n\n## Adding RadialProgressView to AXML Layouts\n\nOn Android, you can also add `RadialProgressView` to your *axml*\nlayouts:\n\n```xml\n\u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\tandroid:orientation=\"vertical\" android:layout_width=\"fill_parent\" android:layout_height=\"fill_parent\"\u003e\n\t\u003cradialprogress.RadialProgressView\n\t\tandroid:id=\"@+id/progressView\"\n\t\tandroid:layout_width=\"200px\"\n\t\tandroid:layout_height=\"200px\"\n\tmin_value=\"0\"\n\tmax_value=\"100\"\n\tprogress_type=\"big\"\n\thide_label=\"false\"\n\tprogress_color=\"#FF00FF\" /\u003e\n\u003c/LinearLayout\u003e\n```\n","Hash":"c044f822673799279ef9d5ebd83ddaa5","TargetPlatforms":["ios","ios-unified","android"],"TrialHash":null}